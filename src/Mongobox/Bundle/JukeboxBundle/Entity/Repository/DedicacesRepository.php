<?php

namespace Mongobox\Bundle\JukeboxBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

use Mongobox\Bundle\JukeboxBundle\Entity\Dedicaces;

/**
 * DedicacesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DedicacesRepository extends EntityRepository
{
    /**
     * Fonction de test d'existance d'une dédicace permanante dans un groupe pour une vidéo
     *
     * @param int $video
     * @param array $groups
     * @return int
     */
    public function testVideoGroups($video, $groups)
    {
        $parameters = array('video' => $video, 'groups' => $groups);
        $q = $this->createQueryBuilder('d')
            ->select('d.id')
            ->innerJoin('d.groups', 'g')
            ->where('d.permanant = true')
            ->andWhere('d.video = :video')
            ->andWhere('g.id IN (:groups)')
            ->setMaxResults(1)
            ->setParameters($parameters)
            ->getQuery();

        $result = $q->getResult();

        return $result;
    }
    /**
     * Fonction de listing des dédicaces dans un groupe pour une vidéo
     *
     * @param int $video
     * @param array $groups
     * @param bool $permanant
     * @return int
     */
    public function findByVideoAndGroups($video, $groups, $permanant = null)
    {
        $parameters = array('video' => $video, 'groups' => $groups);
        $q = $this->createQueryBuilder('d')
            ->select('d.id, d.text, g.title')
            ->innerJoin('d.groups', 'g')
            ->where('d.video = :video')
            ->andWhere('g.id IN (:groups)');

        if ($permanant) {
            $parameters['permanant'] = $permanant;
            $q->andWhere('d.permanant = :permanant');
        }

        $result = $q->setParameters($parameters)->getQuery()->getResult();

        return $result;
    }
    /**
     * Fonction d'enregistrement d'un dédicaces dans un groups
     *
     * @param MongoboxJukeboxBundle:Dedicaces $dedicace
     * @param array $groupsId
     * @param bool $permanente
     *
     */
    function setGroupById(Dedicaces $dedicace, $groupsId, $permanente = false)
    {
        $em = $this->getEntityManager();

        $buffNone = 0;

        foreach ($groupsId as $group_id) {

            if ($permanente == false) {
                $group = $em->getRepository('MongoboxGroupBundle:Group')->find($group_id);
                $group->getDedicaces()->add($dedicace);
            } else {
                $groupDedicace = $em->getRepository('MongoboxJukeboxBundle:Dedicaces')->testVideoGroups($dedicace->getVideo(), array($group_id));
                if (count($groupDedicace) == 0) {
                    $group = $em->getRepository('MongoboxGroupBundle:Group')->find($group_id);
                    $group->getDedicaces()->add($dedicace);
                } else {
                    $buffNone++;
                }
            }
        }

        if ($buffNone == count($groupsId)) {
            return null;
        } else {
            return $dedicace;
        }
    }
}
